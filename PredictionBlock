folder="test_dataset_images"
for filename in os.listdir(folder):
    coord_list=[]
    new_image_list=[]
    image_pred=[]
    sample_image = cv2.imread(os.path.join(folder,filename))
        #prediction_image = cv2.cvtColor(sample_image, cv2.COLOR_BGR2GRAY)
    if sample_image is not None:
        median_blr = cv2.medianBlur(sample_image, 3)
        plt.imshow(median_blr)
        median_blr.shape
       # cv2.waitKey(0)
        copy = median_blr.copy()
        gray = cv2.cvtColor(median_blr, cv2.COLOR_BGR2GRAY)
        prediction_image = gray
        thresh = cv2.threshold(gray,0,255,cv2.THRESH_OTSU + cv2.THRESH_BINARY)[1]
        ROI_number = 0
        cnts = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        cnts = cnts[0] if len(cnts) == 2 else cnts[1]
        for c in cnts:
            x,y,w,h = cv2.boundingRect(c)
            ROI = img[y:y+h, x:x+w]
            #print(x,y,w,h)
            if w > 9  or h > 10 :
                coord_list.append(x)
                coord_list.append(w)
                coord_list.append(y)
                coord_list.append(h)
            cv2.rectangle(copy,(x,y),(x+w,y+h),(36,255,12),1)
            ROI_number += 1
        plt.imshow(copy)
       # cv2.waitKey()
        #print(coord_list)
    imk=prediction_image
    coords= split_image(coord_list)
    for i in range(len(coords)):
        if coords[i][1] >= 30 :
            new_w = coords[i][1] //2
            x_temp = 0
            for j in range(2):
                print("*********Two Images**********")
                w = new_w
                imtest1=imk[coords[i][2]:coords[i][2]+coords[i][3],coords[i][0] + x_temp: coords[i][0] + x_temp + new_w]
                plt.imshow(imtest1)
                plt.show()
                res1 = cv2.resize(imtest1, dsize=(28, 28), interpolation=cv2.INTER_CUBIC)
                new_image_list.append(np.asarray(res1))
                image_pred=np.array(new_image_list)
                image_pred = image_pred.reshape(image_pred.shape[0], 28, 28, 1).astype("float32") / 255
                preds1=model.predict_classes(image_pred, verbose=1)
                probs = model.predict_proba(image_pred)
                best_n = np.argsort(probs, axis=1)[:,-5:]
                print("Best n:", np.transpose(best_n+1))
                print("Predicted by model:",preds1[:len(coords)+1]+1)
                del coord_list[:]
                np.delete(image_pred,0,0)
                np.delete(best_n,0,0)
                x_temp = new_w
        else:
            #find perfect coordinates?
           # print("second if")
            #print(coords[i])
            imtest1=imk[coords[i][2]:coords[i][2]+coords[i][3],coords[i][0]:coords[i][0]+coords[i][1]]
            plt.imshow(imtest1)
            plt.show()
            res1 = cv2.resize(imtest1, dsize=(28, 28), interpolation=cv2.INTER_CUBIC)
            new_image_list.append(np.asarray(res1))
           # print("Inside for Image pred",np.array(image_pred).shape)
            image_pred=np.array(new_image_list)
            image_pred = image_pred.reshape(image_pred.shape[0], 28, 28, 1).astype("float32") / 255
           # print("shape",(image_pred.shape) )
            preds1=model.predict_classes(image_pred, verbose=1)
            probs = model.predict_proba(image_pred)
            best_n = np.argsort(probs, axis=1)[:,-5:]
            print("Best n:", np.transpose(best_n+1))
            print("Predicted by model:",preds1[:len(coords)+1]+1)
            #print(image_pred.shape)
            del coord_list[:]
            np.delete(image_pred,0,0)
            np.delete(best_n,0,0)
